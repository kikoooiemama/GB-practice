# 2. Написать два алгоритма нахождения i-го по счёту простого числа. Функция нахождения простого числа должна принимать
# на вход натуральное и возвращать соответствующее простое число. Проанализировать скорость и сложность алгоритмов.
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков. Используйте этот код и попробуйте его
# улучшить/оптимизировать под задачу.
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.

# Проверка функции
def test(func, m):
    lst = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
           107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
           227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,
           349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
           467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
           613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
           751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,
           887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
    assert lst[m - 1] == func(m)
    print(f"Test {func.__name__}: OK")


# Алгоритм №1
def sieve_er(m):
    n = 1000
    result = []
    sieve = [i for i in range(n)]
    sieve[1] = 0
    for i in range(2, n):
        if sieve[i] != 0:
            result.append(sieve[i])
            if len(result) == m:
                return sieve[i]
            j = i * 2
            while j < n:
                sieve[j] = 0
                j += i


# Time:
# "les_4_task_2.sieve_er(10)"
# 1000 loops, best of 5: 110 usec per loop
# "les_4_task_2.sieve_er(20)"
# 1000 loops, best of 5: 125 usec per loop
# "les_4_task_2.sieve_er(80)"
# 1000 loops, best of 5: 159 usec per loop

# Алгоритм №2
def primary(m):
    n = 1000
    prim = [i for i in range(2, n)]
    counter = 0
    for c in prim:
        d = 2
        while c % d != 0:
            d += 1
        if d == c:
            counter += 1
            if counter == m:
                return c

# Time:
# "les_4_task_2.primary(10)"
# 1000 loops, best of 5: 30 usec per loop
# "les_4_task_2.primary(20)"
# 1000 loops, best of 5: 56.3 usec per loop
# "les_4_task_2.primary(80)"
# 1000 loops, best of 5: 760 usec per loop


# Проверка:
# for j in range(1, 20):
#     test(primary, j)
# for j in range(1, 20):
#     test(sieve_er, j)


# Вывод
# Сложность алгоритма №1: O(n log (log n))
# Сложность алгоритма №2: O(n^2)
# Алгоритм №1 работает быстрее Алгоритма №2 с увеличением n, однако при небольших n Алгоритм №2 быстрее.
